class ClassAncestorActuator{constructor(_opts){_opts.bus&&(this._Bus=_opts.bus),_opts.pins&&(this._Pins=_opts.pins),this.InitProps(_opts)}InitProps(_actuatorProps){this._Id=_actuatorProps.id,this._QuantityChannel=_actuatorProps.quantityChannel,this._Name=_actuatorProps.name,this._Type=_actuatorProps.type,this._TypeInSignals=_actuatorProps.typeInSignals,this._ChannelNames=_actuatorProps.channelNames,this._BusTypes=_actuatorProps.busTypes,this._ManufacturingData=_actuatorProps.manufacturingData||{};const isStrArr=arr=>!!Array.isArray(arr)&&arr.every(i=>"string"==typeof i);let isValid={_Id:p=>"string"==typeof p,_Name:p=>"string"==typeof p,_Type:p=>"string"==typeof p,_QuantityChannel:p=>"number"==typeof p&&p>0,_TypeInSignals:isStrArr,_ChannelNames:isStrArr,_BusTypes:p=>isStrArr(p)||0===p.length,_ManufacturingData:p=>"object"==typeof p};["_Id","_Name","_Type","_TypeInSignal","_ChannelNames","_BusTypes"].forEach(propName=>{if(this[propName]&&!isValid[propName](this[propName]))throw new Error(`Invalid prop: ${propName}`)})}}class ClassMiddleActuator extends ClassAncestorActuator{constructor(_opts){ClassAncestorActuator.call(this,_opts),this._Channels=[],this._IsChOn=[],this._Offsets=[],this._Values=[],this._ChStatus=[],this.InitChannels()}get ID(){return this._Id}get CountChannels(){return this._Channels.filter(o=>o instanceof ClassChannelActuator).length}GetChannel(_num){return this._Channels[_num]}InitChannels(){for(let i=0;i<this._QuantityChannel;i++)this._Channels[i]=new ClassChannelActuator(this,i),this._IsChOn[i]=!1,this._ChStatus[i]=0}InitTasks(){}GetInfo(_chNum){}Init(_opts){}On(_chNum,_val,_opts){throw new Error("Not implemented")}Off(_chNum){throw new Error("Not implemented")}Configure(_opts){throw new Error("Not implemented")}Reset(){throw new Error("Not implemented")}Read(_reg){throw new Error("Not implemented")}Write(_reg,_val){throw new Error("Not implemented")}}class ClassChannelActuator{constructor(actuator,num){if(actuator._Channels[num]instanceof ClassChannelActuator)return actuator._Channels[num];this._Tasks={},this._ActiveTask=null,this._ThisActuator=actuator,this._NumChannel=num}get Value(){return this._ThisActuator._Values[this._NumChannel]}get ID(){return`${this._ThisActuator.ID}-${("0"+this._ThisActuator._QuantityChannel).slice(-2)}-${("0"+this._NumChannel).slice(-2)}`}get Status(){return this._ThisActuator._ChStatus[this._NumChannel]}get IsOn(){return this._ThisActuator._IsChOn[this._NumChannel]}get ActiveTask(){for(let key in this._Tasks)if(this._Tasks[key]._IsActive)return this._Tasks[key];return null}InitTasks(){return this._ThisActuator.InitTasks(this._NumChannel)}On(_val,_opts){return this._ThisActuator.On(this._NumChannel,_val,_opts)}Off(_opts){return this._ThisActuator.Off(this._NumChannel,_opts)}Reset(_chNum){return this._ThisActuator.Reset.apply(this._ThisActuator,arguments)}Configure(_opts){return this._ThisActuator.Configure(this._NumChannel,_opts)}AddTask(_name,_func){if("string"!=typeof _name||"function"!=typeof _func)throw new Error("Invalid arg");this._Tasks[_name]=new ClassTask(this,_func)}RemoveTask(_name){return delete this._Tasks[_name]}RunTask(_name,_args){if(!this._Tasks[_name])return!1;let args=[].slice.call(arguments,1);return this._Tasks[_name].Invoke(args)}ResolveTask(_code){this.ActiveTask.Resolve(_code||0)}CancelTask(){return!!this.ActiveTask&&(this.ActiveTask.Resolve(),this.Off(),!0)}GetInfo(_opts){return this._ThisActuator.GetInfo(this._NumChannel,_opts)}}class ClassDataRefine{constructor(){this._Values=[],this.SetLim(-1/0,1/0),this.SetTransformFunc(1,0)}SetLim(_limLow,_limHigh){if("number"!=typeof _limLow||"number"!=typeof _limHigh)throw new Error("Not a number");if(_limLow>=_limHigh)throw new Error("limLow value shoud be less than limHigh");return this._Values[0]=_limLow,this._Values[1]=_limHigh,!0}SuppressValue(val){return E.clip(val,this._Values[0],this._Values[1])}SetTransformFunc(_k,_b){if("number"!=typeof _k||"number"!=typeof _b)throw new Error("Not a number");return this._Values[2]=_k,this._Values[3]=_b,!0}TransformValue(val){return val*this._Values[2]+this._Values[3]}}const indexes={redLow:0,yelLow:1,green:2,yelHigh:3,redHigh:4};class ClassAlarms{constructor(){this._Zones=[],this._Callbacks=[],this._CurrZone="green"}SetZones(opts){const checkParams={green:()=>"function"==typeof opts.green.cb,yellow:()=>opts.yellow.low<opts.yellow.high,red:()=>opts.red.low<opts.red.high};if(["red","yellow","green"].filter(zoneName=>opts[zoneName]).forEach(zoneName=>{if(!checkParams[zoneName])throw new Error("Incorrect args")}),opts.yellow){if(opts.red){if(opts.yellow.low<=opts.red.low||opts.yellow.high>=opts.red.high)throw new Error("Invalid args")}else if(opts.yellow.low<this._Zones[indexes.redLow]||opts.yellow.high>this._Zones[indexes.redHigh])throw new Error("Invalid args");this._Zones[indexes.yelLow]=opts.yellow.low,this._Zones[indexes.yelHigh]=opts.yellow.high,this._Callbacks[indexes.yelLow]=opts.yellow.cbLow,this._Callbacks[indexes.yelHigh]=opts.yellow.cbHigh}if(opts.red){if(opts.yellow){if(opts.red.low>=opts.yellow.low||opts.red.high<=opts.yellow.high)throw new Error("Invalid args")}else if(opts.red.low>this._Zones[indexes.yelLow]||opts.red.high<this._Zones[indexes.yelHigh])throw new Error("Invalid args");this._Zones[indexes.redLow]=opts.red.low,this._Zones[indexes.redHigh]=opts.red.high,this._Callbacks[indexes.redLow]=opts.red.cbLow,this._Callbacks[indexes.redHigh]=opts.red.cbHigh}opts.green&&(this._Callbacks[indexes.green]=opts.green.cb)}CheckZone(val){let prevZone=this._CurrZone;this._CurrZone=val<this._Zones[indexes.redLow]?"redLow":val>this._Zones[indexes.redHigh]?"redHigh":val<this._Zones[indexes.yelLow]?"yelLow":val>this._Zones[indexes.yelHigh]?"yelHigh":"green",prevZone!==this._CurrZone&&this._Callbacks[indexes[this._CurrZone]](prevZone)}}class ClassTask{constructor(_channel,_func){this.name="ClassTask",this._Channel=_channel,this._IsActive=!1,this._Func=_func.bind(this._Channel)}Invoke(args){let promisified;return console.log(this._Channel instanceof ClassChannelActuator),new Promise((res,rej)=>(this.resolve=res,this.reject=rej,this._Channel.ActiveTask?this.Reject(-1):(this._IsActive=!0,this._Func.apply(this._Channel,args))))}Resolve(_code){return this._IsActive=!1,this.resolve(_code||0)}Reject(_code){return this._IsActive=!1,this.reject(_code||-1)}}exports=ClassMiddleActuator;