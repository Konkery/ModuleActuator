class ClassBuzzer extends ClassMiddleActuator{constructor(_actuatorProps,_opts){this.name="ClassBuzzer",ClassMiddleActuator.apply(this,[_actuatorProps,_opts]),this._Channels[0]._DataRefine.SetLim(200,5e3);const make_sound=this.MakeSound.bind(this);this.MakeSound=(_freq,_opts)=>{const opts={pulseDur:_opts.pulseDur||100,numRep:_opts.numRep||1,prop:_opts.prop||.5};return["numRep","pulseDur","prop"].forEach(property=>{if("number"!=typeof opts[property]||opts[property]<0)throw new Error("Invalid args")}),opts.prop=E.clip(opts.prop,0,1),opts.pulseDur=E.clip(opts.pulseDur,0,2147483647),make_sound(_freq,opts)},this.InitBaseTasks()}static get ERROR_CODE_ARG_VALUE(){return 10}static get ERROR_MSG_ARG_VALUE(){return`ERROR>> invalid data. ClassID: ${this.name}`}InitBaseTasks(){const beepOneLong=freq=>{let args=[];return this.MakeSound(freq,{numRep:1,pulseDur:2e3,prop:.5})},beepTwice=(freq,dur)=>this.MakeSound(freq,{numRep:2,pulseDur:dur,prop:.5}),beep10sec=freq=>this.MakeSound(freq,{numRep:1,pulseDur:1e4,prop:.5});this._Channels[0].AddTask("BeepOneLong",beepOneLong),this._Channels[0].AddTask("BeepTwice",beepTwice),this._Channels[0].AddTask("Beep10Sec",beep10sec)}On(_chNum,_arg){this._IsChOn[_chNum]&&this.Off();let freq=_arg;console.log("freq = "+freq),analogWrite(this._Pins[0],.5,{freq:freq})}Off(){digitalWrite(this._Pins[0],1),this._IsChOn[0]=!1}MakeSound(_arg,_opts){console.log(arguments);let Thi=_opts.pulseDur,Tlo=Math.floor(_opts.pulseDur*(1-_opts.prop)/_opts.prop),count=2*_opts.numRep,beep_flag=!0;this._IsChOn[0]=!0;let beep_func=()=>{--count,console.log(count,beep_flag),count>0?(beep_flag?(digitalWrite(this._Pins[0],beep_flag),setTimeout(beep_func,Tlo)):(this.On(0,_arg),setTimeout(beep_func,Thi)),beep_flag=!beep_flag):(console.log("DONE111"),this._IsChOn[0]=!1,this._Channels[0].GetActiveTask()&&this._Channels[0].GetActiveTask().Resolve())};this.CancelSound=()=>{count=0,this.Off()},console.log(`12arg = ${_arg}`),this.On(0,_arg),setTimeout(beep_func,Thi)}}exports=ClassBuzzer;