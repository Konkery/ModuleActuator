class ClassBuzzer extends ClassMiddleActuator{constructor(_actuatorProps,_opts){this.name="ClassBuzzer",ClassMiddleActuator.apply(this,[_actuatorProps,_opts]),this._Channels[0]._DataRefine.SetLim(200,2500)}static get ERROR_CODE_ARG_VALUE(){return 10}static get ERROR_MSG_ARG_VALUE(){return`ERROR>> invalid data. ClassID: ${this.name}`}Start(_chNum,_arg,_opts){let opts=this.CheckStartOpts(_opts);this._Freq=_arg;let Thi=opts.pulseDur,Tlo=Math.floor(opts.pulseDur*(1-opts.prop)/opts.prop);this._Count=2*opts.numRep;let beep_flag=!0;analogWrite(this._Pins[0],_arg,{freq:this._Freq});let beep_func=()=>{--this._Count,this._Count>0&&(beep_flag?(digitalWrite(this._Pins[0],1),setTimeout(beep_func,Tlo)):(analogWrite(this._Pins[0],this.Ch0_Value,{freq:this._Freq}),setTimeout(beep_func,Thi)),beep_flag=!beep_flag)};setTimeout(beep_func,Thi)}Stop(){this._Count=0}ChangeFreq(_freq){return"number"==typeof _freq&&(this._Freq=_freq,!0)}CheckStartOpts(_opts){const opts={pulseDur:_opts.pulseDur||100,numRep:_opts.numRep||1,prop:_opts.prop||.5};if("number"!=typeof opts.pulseDur||"number"!=typeof opts.numRep||"number"!=typeof opts.freq||"number"!=typeof opts.prop||!Number.isInteger(opts.pulseDur)||!Number.isInteger(opts.numRep))throw new Error("Invalid args");return opts}}exports=ClassBuzzer;